#import "theme://include/defs.view"
#import "theme://include/buttons.view"

#define TYPE_ENTRY(LABEL, TITLE, ICON, COLOR) {
  widget(backdrop, {
    .focusable = 0.1;
    onEvent(enter, {
      $self.source.svctype = LABEL;
    });

    .alphaSelf = iir(isFocused() * 1, 8) * 0.8;
    .color = COLOR;

    PLATE_GFX();
    widget(container_z, {
      widget(icon, {
	.color = select($self.source.svctype == LABEL ||
			isHovered() || isFocused(),
			[1.0, 1.0, 1.0],
			COLOR);
	.shadow = true;
	.source = ICON;
	.sizeScale = 2;
      });
    });
  });
}


widget(container_x, {

  widget(icon, {
    .align = top;
    .color = select(isFocused(), [1.0, 1.0, 1.0], PLATE_COLOR_OTHER());
    .source = "theme://icons/48x48/Bookmark.png";
    .shadow = true;
  });
  
  widget(backdrop, {
    .weight = 1.5;
    .focusOnClick = true;
    .filterConstraintX = true;

    .alphaSelf = 0.5;

    .color = PLATE_COLOR_OTHER();
    PLATE_GFX();

    widget(container_y, {

      widget(container_x, {
	widget(label, {
	  .width = $ui.fontsize * 8;
	  .caption = "Title:";
	  .align = right;
	});

	widget(dummy, {
	  .width = 10;
	});

	widget(backdrop, {
	  .filterConstraintX = true;
	  .weight = 1.0;
	  .source = "theme://graphics/shadedplate.png";
	  .border =  [4, 4, 4, 4];
	  .padding = [0, -3, 0, -3];
	  
	  .color = [0, 0, 0];
	  .alphaSelf = 0.66;
      
	  widget(text, {
	    .focusable = 1.0;
	    bind($self.source.title);
	  });
	});
      });


      widget(container_x, {
	widget(label, {
	  .width = $ui.fontsize * 8;
	  .caption = "URL:";
	  .align = right;
	});

	widget(dummy, {
	  .width = 10;
	});

	widget(backdrop, {
	  .filterConstraintX = true;
	  .weight = 1.0;
	  .source = "theme://graphics/shadedplate.png";
	  .border =  [4, 4, 4, 4];
	  .padding = [0, -3, 0, -3];
	  
	  .color = [0, 0, 0];
	  .alphaSelf = 0.66;
      
	  widget(text, {
	    .focusable = 1.0;
	    bind($self.source.url);
	  });
	});

	widget(dummy, {
	  .width = 2;
	});

	widget(icon, {
	  .color = translate($self.source.status,
			     [1.0, 1.0, 1.0],
			     "ok",   [0.2, 1.0, 0.2],
			     "auth", [1.0, 0.2, 0.2],
			     "nohandler", [1.0, 0.2, 0.2],
			     "fail", [1.0, 0.2, 0.2],
			     "scanning", [0.7, 0.7, 0.2]);

	  .source = translate($self.source.status,
			      void,
			      "ok",   "theme://icons/48x48/Check.png",
			      "auth", "theme://icons/48x48/Lock.png",
			      "nohandler", "theme://icons/48x48/Alert.png",
			      "fail", "theme://icons/48x48/Alert.png",
			      "scanning", "theme://icons/48x48/Scan.png");
	  .shadow = true;
	});
      });

      widget(expander_y, {

	.expansion = scurve(select($self.source.statustxt, 1, 0), 0.15);
	.alpha     = scurve(select($self.source.statustxt, 1, 0), 0.15);

	widget(container_x, {
	
	  widget(dummy, {
	    .width = $ui.fontsize * 8 + 10;
	  });

	  widget(label, {
	    .color = [1.0, 0.2, 0.2];
	    .caption = $self.source.statustxt;
	  });
	});
      });

      widget(container_x, {
	widget(container_y, {
	  .width = $ui.fontsize * 8;
	  widget(label, {
	    .caption = "Type:";
	    .align = right;
	  });
	  
	  widget(label, {
	    .caption = "";
	    .align = right;
	  });
	});

	widget(dummy, {
	  .width = 10;
	});

	widget(backdrop, {
	  .filterConstraintX = true;
	  .weight = 1.0;
	  .source = "theme://graphics/shadedplate.png";
	  .border =  [4, 4, 4, 4];
	  .padding = [0, -3, 0, -3];
	  
	  .color = [0, 0, 0];
	  .alphaSelf = 0.66;
      
	  widget(container_x, {

	    TYPE_ENTRY("music", "Music", "theme://icons/48x48/Music.png",
		       PLATE_COLOR_AUDIO());
	    TYPE_ENTRY("video", "Video", "theme://icons/48x48/Movie.png",
		       PLATE_COLOR_VIDEO());
	    TYPE_ENTRY("tv", "Tv", "theme://icons/48x48/Display.png",
		       PLATE_COLOR_VIDEO());
	    TYPE_ENTRY("image", "Image", "theme://icons/48x48/Image.png",
		       PLATE_COLOR_VIDEO());
	    TYPE_ENTRY("other", "Other", "theme://icons/48x48/Folder.png",
		       PLATE_COLOR_VIDEO());
	  });
	});
      });

      widget(container_x, {
	widget(dummy, {
	  .width = $ui.fontsize * 8 + 10;
	});

	widget(backdrop, {
	  .filterConstraintX = true;
	  .weight = 1.0;
	  .source = "theme://graphics/shadedplate.png";
	  .border =  [4, 4, 4, 4];
	  .padding = [-3, -3, -3, -3];
	  
	  .color = [0, 0, 0];
	  .alphaSelf = 0.66;

	  widget(container_x, {
	    ICON2("theme://icons/48x48/Delete.png",
		  "Delete",
		  {
		    delete($self);
		  },
		  PLATE_COLOR_DELETE(),
		  1, false, true);
	  });
	});
      });
    });
  });
});
