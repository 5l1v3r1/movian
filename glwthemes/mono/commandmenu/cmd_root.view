#import "skin://commandmenu.skin"
#import "theme://include/separators.view";

widget(container_y, {

  .hidden = !$ui.menu;
  .padding = 5;

  .spacing = 10;
  .align = center;

  // -- clock and date -------------------------------------------------

  widget(container_x, {
    .align = right;
    .spacing = 5;

    commandGroup(widget(container_z, {
      .width = $ui.size * 4;
      widget(image, {
	.source = "skin://gfx/clock.png";
	.hqScaling = true;
      });
      widget(image, {
	.source = "skin://gfx/clock-hand-short.png";
	.angle = ($global.clock.hour % 12) * 30 + 
	  ($global.clock.minute) / 2;
      });
      widget(image, {
	.source = "skin://gfx/clock-hand-long.png";
	.angle = $global.clock.minute * 6;
      });
    }));


    commandGroup(widget(container_y, {
      .width = $ui.size * 4;
      widget(label, {
	.align = center;
	.caption = strftime($global.clock.unixtime, "%B");
      });
      widget(label, {
	.align = center;
	.sizeScale = 2;
	.caption = strftime($global.clock.unixtime, "%d");
      });
    }));
  });

  space(1);

  widget(loader, {
    .time = 0.25;
    .effect = blend;
    .source = translate($global.media.current.type, "",
			"video", "theme://commandmenu/cmd_video.view",
			"tv",    "theme://commandmenu/cmd_video.view");
  });


  widget(list_x, {
    .hidden = !$global.media.current.seekindex.available;
    .height = 100;
    .spacing = 5;
    cloner($global.media.current.seekindex.positions, backdrop, {
      .alpha = 0.5 + isFocused();
      .width = 177;
      .source = "skin://gfx/blackdrop.png";
      .border = 12;
      .padding = -4;
      .focusable = 0.01;

      onEvent(activate, {
	$global.media.current.currenttime = $self.timestamp;
      });

      widget(image, {
	.hqScaling = true;
	.source = $self.image;
      });
    });
  });

  // -- playdeck ------------------------------------------------------

  commandGroup(widget(container_x, {
    .align = center;
    
    widget(container_y, {
      .spacing = 5;

      widget(container_x, {
	.spacing = 5;
	.align = center;
	.homogenous = true;
	$view.playcontrollerswidth = getWidth();
	
	commandSkipBackward(event(PreviousTrack),
			    $global.media.current.canSkipBackward);
	commandSeekReverse(event(SeekReverse),
			   $global.media.current.canSeek);
	
	widget(deck, {
	  .effect = flipVertical;
	  .noInitialTransform = true;
	  .time = 0.2;
	  
	  commandPause(event(Pause), $global.media.current.canPause);
	  commandPlay(event(Play),   $global.media.current.canPause);
	  
	  .page = $global.media.current.playstatus == "pause";
	});
	
	commandSeekForward(event(SeekForward),
			   $global.media.current.canSeek);
	commandSkipForward(event(NextTrack), 
			   $global.media.current.canSkipForward);
	
	commandStop(event(Stop),   $global.media.current.canStop);
	commandEject(event(Eject), $global.media.current.canEject);

	commandRepeatToggle($global.media.current.repeat,
			    $global.media.current.canRepeat);
	commandRepeatShuffle($global.media.current.shuffle,
			     $global.media.current.canShuffle);
      });
      
      commandSeekSlider(
	$global.media.current.currenttime,
	$global.media.current.metadata.duration,
	$global.media.current.canSeek,
	$view.playcontrollerswidth,
	!$global.media.current.canSeek
      );
    });
  }));

  widget(dummy, {
    .height = $ui.playdeckheight;
  });
});
