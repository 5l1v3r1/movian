#import "skin://buttons/buttons.skin"

#define CMDBUTTONSCALE() {3.0}
#define PLAYBUTTONSCALE() {2.0}
#define MENUNAVBUTTONSCALE() {2.0}

#define commandMenuLeft(EVENT, CAPTION, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/NavLeft.png",
		    CAPTION=CAPTION,
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=MENUNAVBUTTONSCALE());
}

#define commandMenuRight(EVENT, CAPTION, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/NavRight.png",
		    CAPTION=CAPTION,
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=MENUNAVBUTTONSCALE());
}

#define commandBlank(EVENT, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/Blank.png",
		    CAPTION="Screensaver",
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=CMDBUTTONSCALE());
}

#define commandSettings(EVENT, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/Settings.png",
		    CAPTION="Settings",
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=CMDBUTTONSCALE());
}

#define commandPlayqueue(EVENT, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/Queue.png",
		    CAPTION="Playqueue",
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=CMDBUTTONSCALE());
}

#define commandExit(EVENT, ENABLED=true) {
  _glossybuttonText(ICON="skin://icons/Exit.png",
		    CAPTION="Quit Showtime",
		    EVENT=EVENT,
		    ENABLED=ENABLED,
		    SCALE=CMDBUTTONSCALE());
}

#define commandSkipBackward(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/SkipBack.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandSkipForward(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/SkipNext.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandSeekReverse(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/SeekBack.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandSeekForward(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/SeekFwd.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandStop(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/Stop.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandEject(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/Eject.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandPlay(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/Play.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandPause(EVENT, ENABLED=true) {
  _glossybutton(ICON="skin://icons/Pause.png",
		EVENT=EVENT,
		ENABLED=ENABLED,
		SCALE=PLAYBUTTONSCALE());
}

#define commandRepeatToggle(STATE, ENABLED=true) {
  _glossybuttontoggle(ICON="skin://icons/Repeat.png",
		      STATE=STATE,
		      ENABLED=ENABLED,
		      SCALE=PLAYBUTTONSCALE());
}

#define commandRepeatShuffle(STATE, ENABLED=true) {
  _glossybuttontoggle(ICON="skin://icons/Shuffle.png",
		      STATE=STATE,
		      ENABLED=ENABLED,
		      SCALE=PLAYBUTTONSCALE());
}

#define commandSeekSlider(CURRENTTIME, DURATION, ENABLED=true, WIDTH=void,
			 HIDDEN=false) {
  widget(container_x, {
    .hidden = HIDDEN;
    .align = center;
    .height = $ui.size;
    .spacing = 10;
    widget(label, {
      .align = right;
      .caption = value2duration(preferTentative(CURRENTTIME));
      .width = 100;
    });
    widget(container_z, {
      .width ?= WIDTH;
      widget(backdrop, {
	.source = "skin://gfx/hsliderbackground.png";
	.border = 5;
	.padding = -5;
	.color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());

	widget(slider_x, {
	  .focusable = ENABLED;
	  .min = 0;
	  .max = DURATION;
	  .step = 15;
	  bind(CURRENTTIME);
	  .alwaysGrabKnob = true;
	  widget(backdrop, {
	    .width = $ui.size;
	    .source = "skin://gfx/hsliderknob.png";
	    .border = 6;
	    .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
	  });
	});
      });
      _gloss();
    });
    widget(label, {
      .caption = value2duration(DURATION);
      .width = 100;
    });
  });
}




#define commandSlider(VALUE, MIN, MAX, STEP, CAPTION, ENABLED=true, HIDDEN=false) {
  widget(container_z, {
    widget(backdrop, {
      .source = "skin://gfx/hsliderbackground.png";
      .border = 5;
      .padding = -2;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
      
      widget(slider_x, {
	.focusable = ENABLED;
	.min = MIN;
	.max = MAX;
	.step = STEP;
	bind(VALUE);
	.alwaysGrabKnob = true;
	widget(backdrop, {
	  .source = "skin://gfx/focused.png";
	  .border =  5;
	  .additive = true;
	  .alpha = select(isHovered() || isFocused(), 0.8, 0.4);
	  widget(label, {
	    .caption = CAPTION;
	  });
	});
      });
    });
    _gloss();
  });
}


#define commandSelectableItem(TITLE, EXTRA, SELECTED, EVENT) {
  widget(container_x, {
    .focusable = 0.5;
    onEvent(activate, EVENT);
    
    widget(icon, {
      .source = "skin://icons/Check.png";
      .shadow = true;
      .alpha = iir(SELECTED, 8);
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
    
    widget(label, {
      .filterConstraintX = true;
      .caption = TITLE;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
      .caption = TITLE;
    });
    widget(label, {
      .align = right;
      .caption = EXTRA;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
  });
}


#define commandGroup(BODY) {
  widget(backdrop, {
    .source = "skin://gfx/blackdrop.png";
    .border = 12;
    .alphaSelf = 0.5;
    BODY;
  });
}
