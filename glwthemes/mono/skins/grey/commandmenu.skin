#import "skin://buttons/buttons.skin"

#define commandButton(EVENT, TYPE, ENABLED) {
  _glossybutton(ICON="skin://icons/" + 
		translate(TYPE, TYPE,
			  "SeekForward", "SeekFwd",
			  "Subtitles", "Script"
			 ) + ".png",
		EVENT=EVENT,
		HIDDEN=!ENABLED,
		ENABLED=0.9,
		SCALE=2.0);
}

#define commandButton2(EVENT, TYPE, ENABLED, VISIBLE) {
  _glossybutton(ICON="skin://icons/" + 
		translate(TYPE, TYPE,
			  "SeekForward", "SeekFwd",
			  "Subtitles", "Script"
			 ) + ".png",
		EVENT=EVENT,
		HIDDEN=!(VISIBLE),
		ENABLED=0.9 * (ENABLED),
		SCALE=2.0);
}

#define commandButtonText(CAPTION, EVENT, ENABLED, VISIBLE) {
  _glossybuttonTextOnly(CAPTION=CAPTION,
			EVENT=EVENT,
			ENABLED=0.9 * (ENABLED),
			HIDDEN=!(VISIBLE),
			SCALE=1.0);
}

#define commandToggle(STATE, TYPE, ENABLED) {
  _glossybuttontoggle(ICON="skin://icons/" +
		      translate(TYPE, TYPE) + ".png",
		      STATE=STATE,
		      HIDDEN=!ENABLED,
		      ENABLED=0.9,
		      SCALE=2.0);
}


#define commandSeekSlider(CURRENTTIME, DURATION, ENABLED=true, WIDTH=void,
			 HIDDEN=false) {
  widget(container_x, {
    .hidden = HIDDEN;
    .align = center;
    .height = $ui.size;
    .spacing = 10;
    widget(label, {
      .align = right;
      .caption = value2duration(preferTentative(CURRENTTIME));
      .width = 100;
    });
    widget(container_z, {
      .width ?= WIDTH;
      widget(backdrop, {
	.source = "skin://gfx/hsliderbackground.png";
	.border = 5;
	.padding = -5;
	.color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());

	widget(slider_x, {
	  .focusable = ENABLED;
	  .min = 0;
	  .max = DURATION;
	  .step = 15;
	  bind(CURRENTTIME);
	  .alwaysGrabKnob = true;
	  widget(backdrop, {
	    .width = $ui.size;
	    .source = "skin://gfx/hsliderknob.png";
	    .border = 6;
	    .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
	  });
	});
      });
      _gloss();
    });
    widget(label, {
      .caption = value2duration(DURATION);
      .width = 100;
    });
  });
}




#define commandSlider(VALUE, MIN, MAX, STEP, CAPTION, ENABLED=true, HIDDEN=false) {
  widget(backdrop, {
    .source = "skin://gfx/border-tiny.png";
    .border = 4;
    .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    
    widget(slider_x, {
      .focusable = ENABLED;
      .min = MIN;
      .max = MAX;
      .step = STEP;
      bind(VALUE);
      .alwaysGrabKnob = true;
      widget(backdrop, {
	.source = "skin://gfx/focused.png";
	.border =  5;
	.padding = [0, -3];
	.additive = true;
	.alpha = select(isHovered() || isFocused(), 0.8, 0.4);
	widget(label, {
	  .caption = CAPTION;
	});
      });
    });
  });
}


#define commandAudioTrack(TITLE, FORMAT, SELECTED, EVENT) {
  widget(container_x, {
    .focusable = 0.5;
    onEvent(activate, EVENT);
    
    widget(icon, {
      .source = "skin://icons/Check.png";
      .shadow = true;
      .alpha = iir(SELECTED, 8);
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
    
    widget(label, {
      .filterConstraintX = true;
      .caption = TITLE;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });

    widget(label, {
      .align = right;
      .caption = FORMAT;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
  });
}



#define commandSubtitleTrack(TITLE, FORMAT, SOURCE, SELECTED, EVENT) {
  widget(container_x, {
    .focusable = 0.5;
    onEvent(activate, EVENT);
    
    widget(icon, {
      .source = "skin://icons/Check.png";
      .shadow = true;
      .alpha = iir(SELECTED, 8);
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
    
    widget(label, {
      .filterConstraintX = true;
      .weight = 6;
      .caption = TITLE;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });

    widget(label, {
      .filterConstraintX = true;
      .weight = 2;
      .caption = SOURCE;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });

    widget(label, {
      .filterConstraintX = true;
      .weight = 1;
      .align = right;
      .caption = FORMAT;
      .color = select(isHovered() || isFocused(), SELCOLOR(), BASECOLOR());
    });
  });
}


#define commandGroup(BODY) {
  widget(backdrop, {
    .source = "skin://gfx/blackdrop.png";
    .border = 12;
    .alphaSelf = 0.66;
    BODY;
  });
}




#define commandGroupFullWidth(BODY) {
  widget(backdrop, {
    .source = "skin://gfx/blackdrop.png";
    .border = 12;
    .alphaSelf = 0.66;
    .leftBorder = false;
    .rightBorder = false;
    BODY;
  });
}


#define commandTabGroup(BODY)
{
  widget(container_x, {
    .height = $ui.size + 6;
    widget(backdrop, {
      .width = 30;
      .source = "skin://gfx/tab-top.png";
      .border = [2,0,2,0];
    });

    BODY;
    widget(backdrop, {
      .source = "skin://gfx/tab-top.png";
      .border = [2,0,2,0];
    });
    
  });
}


#define commandTab(PAGEPROP, CAPTION, PAGENUM) {
  widget(backdrop, {
    .source = select(PAGEPROP == PAGENUM,
		     "skin://gfx/tab-selected.png",
		     "skin://gfx/tab-unselected.png");
    .border  = [15,0];
    .padding = [8,0];
    widget(label, {
      .caption = CAPTION;
      .focusable = true;
      .color = select(isFocused() || isHovered(), 1, 0.4);
      onEvent(activate, {
	(PAGEPROP) = PAGENUM;
      });
    });
  });
}