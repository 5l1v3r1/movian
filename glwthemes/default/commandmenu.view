
widget(container_x, {
  .hidden = !$ui.menu;

  space(0.25);
	
  widget(backdrop, {
    .source = "theme://images/whitebox.png";
    .border = [3, 3, 6, 6];
    .color = [0.1, 0.5, 0.7];
    .alphaSelf = 0.8;
    
    widget(container_y, {
      
      widget(label, {
	.align = center;
	.caption = "Command menu";
	.sizeScale = 2;
      });

      HORIZONTAL_SEPARATOR();

      widget(container_x, {
	.filterConstraintX = true;

	widget(dummy, {
	  .width = SLIDER_WIDTH();
	});

	widget(list_y, {
	  .id = "list";
	  
	  widget(label, {
	    .caption = "Navigation";
	  });
		
	  widget(container_x, {
	    ACTION_ICON2("theme://icons/64x64/back.png", 
			 {
			   $ui.menu = false;
			   fireEvent(event(Back));
			 },
			 2, $global.nav.canGoBack);
	    
	    ACTION_ICON2("theme://icons/64x64/next.png", 
			 {
			   $ui.menu = false;
			   fireEvent(event(Forward));
			 },
			 2, $global.nav.canGoForward);
	    
	    ACTION_ICON2("theme://icons/64x64/home.png",
			 {
			   $ui.menu = false;
			   fireEvent(event(Home));
			 }, 2, 1);
	    
	    ACTION_ICON2("theme://icons/64x64/info.png", 
			 {
			   $ui.menu = false;
			   fireEvent(navOpen("page:info"));
			 }, 2, 1);
	  });
	  
	  HORIZONTAL_SEPARATOR();
	  
	  widget(label, {
	    .caption = "Play control";
	  });
	  
	  widget(container_x, {
	    ACTION_ICON2("theme://icons/64x64/skip_backward.png", 
			 event(PreviousTrack), 2,
			 $global.media.current.canSkipBackward);
	    
	    ACTION_ICON2("theme://icons/64x64/rewind.png", 
			 event(SeekReverse), 2,
			 $global.media.current.canSeek);
	    
	    widget(loader, {
	      .hidden = !$global.media.current.canPause;
	      .time = 0.2;
	      .source = translate($global.media.current.playstatus, 
				  void,
				  "play",  "theme://cmdmenu/pause.view",
				  "pause", "theme://cmdmenu/play.view");
	    });
	    
	    ACTION_ICON2("theme://icons/64x64/fast_forward.png", 
			 event(SeekForward), 2,
			 $global.media.current.canSeek);
	    
	    ACTION_ICON2("theme://icons/64x64/skip_forward.png", 
			 event(NextTrack), 2,
			 $global.media.current.canSkipForward);
	    
	    ACTION_ICON2("theme://icons/64x64/stop.png", 
			 event(Stop), 2,
			 1);
	    
	    ACTION_ICON2("theme://icons/64x64/eject.png", 
			 event(Eject), 2,
			 $global.media.current.canEject);
	    
	  });
	  
	  // ------- Seek bar

	  widget(backdrop, {
	    .hidden = !$global.media.current.canSeek;
	    PLATE_PROPS();
	    .alphaSelf = 0.5;
	    .color = [0.0, 0.0, 0.0];
	    
	    widget(slider_x, {
	      .focusable = 0.2 * $global.media.current.canSeek;
	      .max = $global.media.current.metadata.duration;
	      .step = 15;
	      bind($global.media.current.currenttime);
	      widget(backdrop, {
		KNOB_PROPS();
		widget(label, {
 		  .align = center;
		  .caption = value2duration($global.media.current.currenttime);
		});
	      });
	    });
	  });
	  
	  HORIZONTAL_SEPARATOR();

	  // ------- A/V sync

	  widget(label, {
	    .hidden = $global.media.current.type != "video";
	    .caption = "Audio / Video synchronization";
	  });
	  
	  widget(backdrop, {
	    .hidden = $global.media.current.type != "video";
	    PLATE_PROPS();
	    .alphaSelf = 0.5;
	    .color = [0.0, 0.0, 0.0];
		  
	    widget(slider_x, {
	      .focusable = 0.2;
	      .min = -1000;
	      .max =  1000;
	      .step = 10;

	      bind($global.media.current.avdelta);
	      widget(backdrop, {
		KNOB_PROPS();
		widget(label, {
 		  .align = center;
		  .caption = int2str($global.media.current.avdelta) + "ms";
		});
	      });
	    });
	  });

	  HORIZONTAL_SEPARATOR($global.media.current.type != "video");

	  // ------- Audio tracks

	  widget(label, {
	    .hidden = $global.media.current.type != "video";
	    .caption = "Audio tracks:";
	  });

	  cloner($global.media.current.metadata.audiostreams, backdrop, {
	    BUTTON_PROPS(0.1);
	    onEvent(enter, selectTrack($self.id));
	    .hidden = $global.media.current.type != "video";

	    widget(container_x, {
	      
	      widget(icon, {
		.source = "theme://icons/32x32/accept.png";
		.alpha = iir($self.id == 
			     $global.media.current.audio.current, 8);
	      });

	      widget(label, {
		.caption = $self.title;
	      });
	      widget(label, {
		.align = right;
		.caption = $self.format;
	      });
	    });
	  });

	  HORIZONTAL_SEPARATOR($global.media.current.type != "video");

	  // ------- Subtitles

	  widget(label, {
	    .hidden = $global.media.current.type != "video";
	    .caption = "Subtitles:";
	  });

	  cloner($global.media.current.metadata.subtitlestreams, backdrop, {
	    BUTTON_PROPS(0.1);
	    onEvent(enter, selectTrack($self.id));
	    .hidden = $global.media.current.type != "video";

	    widget(container_x, {
	      widget(icon, {
		.source = "theme://icons/32x32/accept.png";
		.alpha = iir($self.id == 
			     $global.media.current.subtitle.current, 8);
	      });

	      widget(label, {
		.caption = $self.title;
	      });
	      widget(label, {
		.align = right;
		.caption = $self.format;
	      });
	    });
	  });

	  HORIZONTAL_SEPARATOR($global.media.current.type != "video");

	  // ------- Shuffle button

	  widget(container_x, {
	    .hidden = !$global.media.current.canShuffle;
	    widget(label, {
	      .align = right;
	      .caption = "Shuffle";
	    });
	    
	    widget(backdrop, {
	      BUTTON_PROPS(1.0);
	      onEvent(enter, event(Shuffle))
	      widget(label, {
		.align = left;
		.caption = translate($global.media.current.shuffle,
				     "Unknown",
				     0, "Off",
				     1, "On");
	      });
	    });
	  });

	  // ------- Repeat button

	  widget(container_x, {
	    .hidden = !$global.media.current.canRepeat;
	    widget(label, {
	      .align = right;
	      .caption = "Repeat";
	    });
	    
	    widget(backdrop, {
	      BUTTON_PROPS(1.0);
	      onEvent(enter, event(Repeat))
	      widget(label, {
		.align = left;
		.caption = translate($global.media.current.repeat,
				     "Unknown",
				     0, "Off",
				     1, "On");
	      });
	    });
	  });

	  // ------- Stats button

	  widget(container_x, {
	    .hidden = $global.media.current.type != "video";
	    widget(label, {
	      .align = right;
	      .caption = "Show stats";
	    });
	    
	    widget(backdrop, {
	      BUTTON_PROPS(1.0);
	      onEvent(enter, event(MediaStats))
	      widget(label, {
		.align = left;
		.caption = translate($global.media.current.stats,
				     "Unknown",
				     0, "Off",
				     1, "On");
	      });
	    });
	  });

	});


	// ------- Slider (to the right)
	      
	widget(slider_y, {
	  .width = SLIDER_WIDTH();
	  .focusable = 0.2 * canScroll();
	  .alpha = iir(canScroll(), 16);
	  bind("list");
	  
	  widget(backdrop, {
	    KNOB_PROPS();
	  });
	});
      });
    });
  });
  
  space(0.25);
});
