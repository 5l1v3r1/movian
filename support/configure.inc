#!/bin/bash
#
# Showtime configure shared functions
#
# Copyright (c) 2005-2008 Andreas Ã–man
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#

TOPDIR=`pwd`
TMPDIR=${TOPDIR}/tmp
BUILDDIR=build.${PLATFORM}
GLW_DEFAULT_THEME="default"

RELEASENAME=`head -n1 ${TOPDIR}/ChangeLog | awk '{print $2}' | sed s/\(// | sed s/\)//`

CONFIG_LIST="
 libasound
 libpulse
 libfreetype
 libpthread
 zlib
 posix_networking
 dvd
 dvd_linux
 dvd_wii
 cdda
 cddb
 glw
 glw_frontend_x11
 glw_frontend_wii
 glw_frontend_cocoa
 glw_backend_opengl
 glw_backend_gx
 gu
 libogc
 spotify
 libspotify_load_runtime
 lirc
 release
 embedded_resources
 coreaudio
 dbus
 avahi
 appleremote
 bonjour
 nvctrl
 libopenspc
 tinysmb
"

die() {
    rm -rf $TMPDIR
    exit
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}


enabled(){
    eval test "x${!1}" = "xyes"
}

disabled(){
    eval test "x${!1}" = "xno" -o "x${!1}" = "x"
}

toupper(){
    echo "$@" | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        ucname="`toupper $cfg`"
        if enabled $cfg; then
            echo "#define ${pfx}${ucname} 1" >> $header
            echo "#define ENABLE_${ucname} 1" >> $header
            echo "${pfx}${ucname}=yes" >> $makefile
        else
            echo "#define ENABLE_${ucname} 0" >> $header
        fi
    done
}



setup_env(){
    # Create the dir for local libs, and get rid of any relative path

    mkdir -p ${BUILDDIR}
    BUILDDIR=`cd ${BUILDDIR} && pwd`

    CONFIG_H=${BUILDDIR}/config.h
    CONFIG_MAK=${BUILDDIR}/config.mak
    CONFIG_DEF=${TOPDIR}/config.default

    mkdir -p ${BUILDDIR}
    
    # Create a tmpdir used during configure
    mkdir -p ${TMPDIR}
    TMPDIR=`cd ${TMPDIR} && pwd`
    
    # Create config.mak
    cat > ${CONFIG_MAK} << EOF 
# Automatically generated by configure, do not edit
CONFIGURE_ARGS=$@
TOPDIR=$TOPDIR
EOF
   
    # Create config.h
    cat > ${CONFIG_H} << EOF 
/* Automatically generated by configure, do not edit */
#define CONFIGURE_ARGS "$@"
#define SHOWTIME_DEFAULT_UI "${DEFAULT_UI}"
EOF

    # Create config.default
    cat > ${CONFIG_DEF} << EOF 
# Automatically generated by configure, do not edit
PLATFORM ?= $PLATFORM
EOF
}

setup_ffmpeg() {
    echo "Configuring FFmpeg"
    mkdir -p ${BUILDDIR}/ffmpeg/build
    rm -rf ${BUILDDIR}/ffmpeg/install

    (cd ${BUILDDIR}/ffmpeg/build && \
	${TOPDIR}/ext/ffmpeg/configure  \
	$CC_FFMPEG \
	--enable-gpl \
	--disable-encoders \
	--disable-muxers \
	--disable-devices \
	--disable-protocols \
	--disable-network \
	--disable-stripping \
	--disable-static \
	--disable-shared \
	--disable-vdpau \
	--enable-static \
	--prefix=${BUILDDIR}/ffmpeg/install \
	--disable-ffserver \
	--disable-ffmpeg \
	--disable-ffplay \
	--disable-ffprobe \
	--disable-bzlib \
	"$@"
	)

cat >> ${CONFIG_MAK} << EOF 
CFLAGS_cfg  += -I${BUILDDIR}/ffmpeg/install/include
LDFLAGS_cfg += -L${BUILDDIR}/ffmpeg/install/lib
LDFLAGS_cfg += -lswscale -lavformat -lavcodec -lavutil
EOF
}

spotify_setup() {
    enable spotify
    echo >${BUILDDIR}/spotify_app_key.h "static const uint8_t appkey[] = {"
    od <"$1" -v -An -b | sed s/^\ */0/ | sed s/\ *$$/,/| sed s/\ /,\ 0/g|sed s/$/,/ >>${BUILDDIR}/spotify_app_key.h
    echo >>${BUILDDIR}/spotify_app_key.h "};"
}


#
# Do final common stuff
#
finalize() {

    if [ "x${SPOTIFY_KEYFILE}" != "x" ]; then
	spotify_setup "${SPOTIFY_KEYFILE}"
    fi

    # Generate default theme path for GLW
    # Optionally embed the theme if in release mode
    if enabled glw; then
	if enabled embedded_resources; then
	    GLW_DEFAULT_THEME_URL="bundle://glwthemes/${GLW_DEFAULT_THEME}"
	    echo >>${CONFIG_MAK} "BUNDLES+=glwthemes/${GLW_DEFAULT_THEME}"
	else
	    GLW_DEFAULT_THEME_URL="file://`cd glwthemes/$GLW_DEFAULT_THEME && pwd`"
	fi
	echo >>${CONFIG_H} "#define SHOWTIME_GLW_DEFAULT_THEME_URL \""${GLW_DEFAULT_THEME_URL}"\""
    fi

    # Generate resource path for GU
    # Optionally embed the stuff if in release mode
    if enabled gu; then
	if enabled embedded_resources; then
	    GU_RESOURCES_URL="bundle://guresources"
	    echo >>${CONFIG_MAK} "BUNDLES+=guresources"
	else
	    GU_RESOURCES_URL="file://`cd guresources && pwd`"
	fi
	echo >>${CONFIG_H} "#define SHOWTIME_GU_RESOURCES_URL \""${GU_RESOURCES_URL}"\""
    fi


    # Release tag
    if enabled release; then
	echo Release build: ${RELEASENAME}
	echo >>${CONFIG_H} "#define SHOWTIME_RELEASE_TAG \"${RELEASENAME}\""
    fi

    cat >> ${CONFIG_MAK} << EOF 
OSENV=${OSENV}
LDFLAGS_cfg += -lz -lm
EOF
  
    # PROG not set, set to default binary path
    if [ "x${PROG}" == "x" ]; then
        PROG="build.${PLATFORM}/showtime"
    fi
    echo >>${CONFIG_MAK} "PROG=${PROG}"

    # Generate config files
    print_config CONFIG_ ${CONFIG_H} ${CONFIG_MAK} $CONFIG_LIST
    echo "Final binary is: ${PROG}"
    die
}
