#!/bin/bash
#
# Showtime configure shared functions
#
# Copyright (c) 2005-2008 Andreas Ã–man
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#

TOPDIR=`pwd`
TMPDIR=${TOPDIR}/tmp
BUILDDIR=build.${PLATFORM}
DEFAULT_THEME="new"
RELEASE=no

RELEASENAME=`head -n1 ${TOPDIR}/ChangeLog | awk '{print $2}' | sed s/\(// | sed s/\)//`

CONFIG_LIST="
 libasound
 libfreetype
 libexif
 libpthread
 zlib
 posix_networking
 dvd
 glw
 glw_frontend_x11
 glw_frontend_wii
 glw_backend_opengl
 glw_backend_gx
 libogc
 embedded_theme
 spotify
"

die() {
    rm -rf $TMPDIR
    exit
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}


enabled(){
    test "${1#!}" = "$1" && op== || op=!=
    eval test "x\$${1#!}" $op "xyes"
}

disabled(){
    test "${1#!}" = "$1" && op== || op=!=
    eval test "x\$${1#!}" $op "xno"
}

toupper(){
    echo "$@" | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        ucname="`toupper $cfg`"
        if enabled $cfg; then
            echo "#define ${pfx}${ucname} 1" >> $header
            echo "#define ENABLE_${ucname} 1" >> $header
            echo "${pfx}${ucname}=yes" >> $makefile
        else
            echo "#define ENABLE_${ucname} 0" >> $header
        fi
    done
}



setup_env(){
	# Create the dir for local libs, and get rid of any relative path

	mkdir -p ${BUILDDIR}
	BUILDDIR=`cd ${BUILDDIR} && pwd`

	CONFIG_H=${BUILDDIR}/config.h
	CONFIG_MAK=${BUILDDIR}/config.mak
	CONFIG_DEF=${TOPDIR}/config.default

	mkdir -p ${BUILDDIR}

	# Create a tmpdir used during configure
	mkdir -p ${TMPDIR}
	TMPDIR=`cd ${TMPDIR} && pwd`

	# Create config.mak

	cat > ${CONFIG_MAK} << EOF 
# Automatically generated by configure, do not edit
TOPDIR=$TOPDIR
EOF

	# Generate default theme URL
	if enabled embedded_theme; then
	    DEFAULT_THEME_URL="bundle://themes/${DEFAULT_THEME}"
	    echo >>${CONFIG_MAK} "BUNDLES+=themes/${DEFAULT_THEME}"
	else
	    DEFAULT_THEME_URL="file://`cd themes/$DEFAULT_THEME && pwd`"
	fi

	# Create config.h

	cat > ${CONFIG_H} << EOF 
/* Automatically generated by configure, do not edit */
#define SHOWTIME_DEFAULT_THEME_URL "${DEFAULT_THEME_URL}"
EOF

	# Create config.default

	cat > ${CONFIG_DEF} << EOF 
# Automatically generated by configure, do not edit
PLATFORM ?= $PLATFORM
EOF


}


fix_swscale() {
    sed -i.bak "s/#define VOFW 2048/#define VOFW 4096/" $1/libswscale/swscale_internal.h
}

setup_ffmpeg() {
    echo "Configuring FFmpeg"
    mkdir -p ${BUILDDIR}/ffmpeg/build
    rm -rf ${BUILDDIR}/ffmpeg/install
    fix_swscale ${TOPDIR}/ext/ffmpeg

    (cd ${BUILDDIR}/ffmpeg/build && \
	${TOPDIR}/ext/ffmpeg/configure  \
	$CC_FFMPEG \
	--enable-gpl \
	--disable-encoders \
	--disable-muxers \
	--disable-devices \
	--disable-protocols \
	--disable-network \
	--disable-stripping \
	--disable-static \
	--disable-shared \
	--enable-static \
	--prefix=${BUILDDIR}/ffmpeg/install \
	--disable-ffserver \
	--disable-ffmpeg \
	--disable-ffplay \
	--disable-bzlib \
	$@
	)

cat >> ${CONFIG_MAK} << EOF 
CFLAGS_cfg  += -I${BUILDDIR}/ffmpeg/install/include
LDFLAGS_cfg += -L${BUILDDIR}/ffmpeg/install/lib
LDFLAGS_cfg += -lswscale -lavformat -lavcodec -lavutil
EOF
}

spotify_setup() {
    enable spotify
    echo >${BUILDDIR}/spotify_app_key.h "static const uint8_t appkey[] = {"
    od <"$1" -v -An -b | sed s/^\ */0/ | sed s/\ *$$/,/| sed s/\ /,\ 0/g|sed s/$/,/ >>${BUILDDIR}/spotify_app_key.h
    echo >>${BUILDDIR}/spotify_app_key.h "};"
}


finalize() {

if [ "x${SPOTIFY_KEYFILE}" != "x" ]; then
    spotify_setup "${SPOTIFY_KEYFILE}"
fi

if [ ${RELEASE} = yes ]; then
    echo Release build: ${RELEASENAME}
    echo >>${CONFIG_H} "#define SHOWTIME_RELEASE_TAG \"${RELEASENAME}\""
fi


cat >> ${CONFIG_MAK} << EOF 
OSENV=${OSENV}
LDFLAGS_cfg += -lz -lm
EOF

    print_config CONFIG_ ${CONFIG_H} ${CONFIG_MAK} $CONFIG_LIST

    echo "Final binary is: build.${PLATFORM}/showtime"

    die
}
