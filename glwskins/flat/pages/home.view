#define SEARCHBAR() {
  widget(container_z, {

    divider: true;

    filterConstraintX: true;
    widget(quad, {
      zoffset: -400;
      color: 0;
      alpha: 0.4;
    });
    widget(text, {
      padding: [1em, 0.5em];
      style: "ListItemValue";
      size: 1.2em;
      font: "skin://fonts/RobotoCondensed-Regular.ttf";
      focusable: true;
      bind($view.searchQuery);
      onEvent(enter, navOpen("search:" + $view.searchQuery),
	      $view.searchQuery);
      onEvent(submit, navOpen("search:" + $view.searchQuery),
	      $view.searchQuery);
    });
  });
}

widget(cursor, {

  widget(container_y, {

    widget(array, {
      alphaFallOff: 0.3;
      blurFallOff: 0.1;

      margin: [2em, 2em];
      childTilesX: 5;
      childTilesY: 4;

      SEARCHBAR();

      cloner($core.services.stable, container_y, {

        spacing: 0.5em;
        padding: 0.5em;

        focusable: true;
        onEvent(activate, navOpen($self.url, void, $self));

        widget(image, {
          source: $self.icon ??
	    "dataroot://res/svg/" +
	    translate($self.type, "Folder",
		      "music",    "Music",
		      "video",    "Movie",
		      "tv",       "Display",
		      "usb",      "Usb",
		      "dvd",      "Disc",
		      "cd",       "Disc",
		      "bluray",   "Disc",
		      "network",  "Home",
		      "setting",  "Settings",
		      "plugin",   "Plugin",
		      "photos",   "Pictures") + ".svg";

          color:  select($self.icon, 1, iir(!isNavFocused(), 4));
          shadow: select($self.icon, 0, iir(!isNavFocused(), 4));

        });

        widget(label, {
          align: center;
          caption: $self.title;
          size: 1.2em;
          font: "skin://fonts/RobotoCondensed-Regular.ttf";
          color: iir(!isNavFocused(), 4);
          shadow: iir(!isNavFocused(), 4);
        });
      });
    });
  });
  widget(quad, {
    zoffset: -100;
    alpha: 0.6 * iir($ui.keyboard, 4);
    additive: true;
  });

  widget(quad, {
    zoffset: -100;
    alpha: 0.1;
    additive: true;
  });
});
