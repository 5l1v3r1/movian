#!/bin/bash
#
# HTS configure script
#
# Copyright (c) 2005-2009 Andreas Ã–man
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#

PLATFORM="linux"
OSENV="posix"
DEFAULT_UI="glw"

source support/configure.inc

CPU=generic
ARCH=`uname -m`
PREFIX=/usr/local

show_help(){
  common_help

  echo "  --prefix=PREFIX          install in PREFIX [$PREFIX]"
  echo "  --arch=arch              Build for this architecture [$ARCH]"
  echo "  --cpu=cpu                Build and optimize for specific CPU"
  echo "  --cc=CC                  Build using the given compiler"
  echo "  --release                Stage for release"
  echo "  --enable-spotify=keyfile Compile support for Spotify (R) Core"
  exit 1
}


check_header() {
    cat >$TMPDIR/1.c <<EOF
#include <$1>
int main() {
 return 0;
}
EOF
    $CC 2>/dev/null $TMPDIR/1.c -o $TMPDIR/1.bin
}

check_lib() {
    cat >$TMPDIR/1.c <<EOF
int main() {
 return 0;
}
EOF
    $CC 2>/dev/null $TMPDIR/1.c -o $TMPDIR/1.bin -l$1
}

fatal() {
    echo "$1: $2"
    echo "configure with --disable-$1 to skip this module"
    die
}


enable libfreetype
enable glw
enable libasound
enable libpulse
enable lirc
enable gu
enable avahi
enable libspotify_load_runtime
enable dbus
enable cdda
enable cddb
enable libxss
enable libxv
enable serdev
enable ssl
enable locatedb

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --prefix=*) PREFIX="$optval"
  ;;
  --cpu=*) CPU="$optval"
  ;;
  --help) show_help
  ;;
  --release) 
	  enable release
	  enable embedded_resources
  ;;
  --cc=*) CC="$optval"
  ;;
  --enable-spotify=*) SPOTIFY_KEYFILE="$optval"
  ;;
  *)
  common_opt $opt $optval
  esac
done


setup_env "$@"

enable libpthread
enable libx11
enable libxext
enable zlib
enable posix_networking
enable dvd
enable dvd_linux


#
# pkgconfig
#

which >/dev/null pkg-config
if [ $? -ne 0 ]; then
    echo "pkg-config not found. Can not configure."
    die
fi

#
# c compiler
#

checkcc() {
    cat >$TMPDIR/1.c <<EOF
int main() {
 return 0;
}
EOF
    $CC 2>/dev/null $TMPDIR/1.c -o $TMPDIR/1.bin 
}
    

if [ "x$CC" != "x" ]; then
    echo >${CONFIG_MAK} "CC=$CC"
    CC_FFMPEG="--cc=$CC"
else
    CC=cc
fi

if checkcc; then 
    echo "Using C compiler:      $CC"
else
    echo "C compiler ($CC) is not working"
    die
fi

echo >>${CONFIG_MAK} $CC_CONFIG_MAK 


#
# libfreetype2
#
if enabled libfreetype; then
    if pkg-config freetype2; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg +=  " `pkg-config --libs freetype2`
	echo >>${CONFIG_MAK} "CFLAGS_cfg += " `pkg-config --cflags freetype2`
	echo "Using Freetype2:       `pkg-config --modversion freetype2`"
    else
	echo "FreeType 2 not found"
	echo "To compile without it, configure with: --disable-libfreetype"
	die
    fi
fi


#
# opengl for GLW (depends on freetype)
#
if enabled glw; then

    if disabled libfreetype; then
	echo "GLW depends on libfreetype"
	die
    fi

    if disabled libx11; then
	echo "GLW depends on libx11"
	die
    fi

    if disabled libxext; then
	echo "GLW depends on libxext"
	die
    fi

    check_header "X11/Xlib.h" || fatal "glw" "Missing X11 include file X11/Xlib.h"
    if pkg-config gl glu ; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags gl glu`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs gl glu`
	echo "Using GL:              `pkg-config --modversion gl`"
	echo "Using GLU:             `pkg-config --modversion glu`"
    else
	check_header "GL/gl.h"    || fatal "glw" "Missing OpenGL include file GL/gl.h"
	check_header "GL/glx.h"   || fatal "glw" "Missing OpenGL include file GL/glx.h"
	check_header "GL/glu.h"   || fatal "glw" "Missing OpenGL include file GL/glu.h"
	check_lib    "GL"         || fatal "glw" "Unable to link with libGL"
	check_lib    "GLU"        || fatal "glw" "Unable to link with libGLU"
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += -lGLU -lGL"
    fi
    enable glw_frontend_x11
    enable glw_backend_opengl
fi


#
# libasound (ALSA)
#
if enabled libasound; then
    if pkg-config alsa; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags alsa`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs alsa`
	echo "Using ALSA:            `pkg-config --modversion alsa`"
    else
	echo "libasound (ALSA) development files not found."
	echo "To compile without it, configure with: --disable-libasound"
	die
    fi
fi


#
# libpulse (PulseAudio)
#
if enabled libpulse; then
    if pkg-config libpulse; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags libpulse`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs libpulse`
	echo "Using libpulse:        `pkg-config --modversion libpulse`"
    else
	echo "libpulse (PulseAudio) development files not found."
	echo "To compile without it, configure with: --disable-libpulse"
	die
    fi
fi


#
# GTK2 UI
#
if enabled gu; then
    if pkg-config gtk+-2.0 && pkg-config gthread-2.0; then

	if disabled libx11; then
	    echo "GLW depends on libx11"
	    die
	fi

	if disabled libxext; then
	    echo "GLW depends on libxext"
	    die
	fi


	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs gtk+-2.0`
	echo >>${CONFIG_MAK} "CFLAGS_GTK += " `pkg-config --cflags gtk+-2.0`
	echo "Using GTK+:            `pkg-config --modversion gtk+-2.0`"

	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs gthread-2.0`
	echo >>${CONFIG_MAK} "CFLAGS_GTK += " `pkg-config --cflags gthread-2.0`
	echo "Using GTK Threading:   `pkg-config --modversion gthread-2.0`"
    else
	echo "GTK2 not found. Unable to build GU (GTK user interface)."
	echo "To compile without it, configure with: --disable-gu"
	die
    fi
fi


#
# libXss (Screen saver control library)
#
if enabled libxss; then
    if pkg-config xscrnsaver; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags xscrnsaver`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs xscrnsaver`
	echo "Using libxscrnsaver:   `pkg-config --modversion xscrnsaver`"
    else
	echo "libXss not found. Unable to build with screensaver disable support."
	die
    fi
fi


#
# libxv (Xvideo)
#
if enabled libxv; then
    if pkg-config xv; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags xv`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs xv`
	echo "Using libXv:           `pkg-config --modversion xv`"
    else
	echo "libXv not found. Unable to build with Xv support."
	die
    fi
fi


#
# libx11
#
if enabled libx11; then
    if pkg-config x11; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags x11`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs x11`
	echo "Using libX11:          `pkg-config --modversion x11`"
    else
	echo "libX11 not found."
	die
    fi
fi


#
# libxext
#
if enabled libxext; then
    if pkg-config xext; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg  += " `pkg-config --cflags xext`
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs xext`
	echo "Using libXext:         `pkg-config --modversion xext`"
    else
	echo "libXext not found."
	die
    fi
fi


#
# D-Bus
#
if enabled dbus; then
    if pkg-config dbus-1; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs dbus-1`
	echo >>${CONFIG_MAK} "CFLAGS_DBUS += " `pkg-config --cflags dbus-1`
	echo "Using libdbus-1:       `pkg-config --modversion dbus-1`"
    else
	echo "libdbus-1 not found. Unable to build with D-Bus support."
	die
    fi
fi


#
# libcdio_cdda
#
if enabled cdda; then
    if pkg-config libcdio_cdda; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs libcdio_cdda`
	echo "Using libcdio_cdda:    `pkg-config --modversion libcdio_cdda`"
    else
	echo "libcdio_cdda not found. Unable to build with Audio CD support."
	die
    fi
fi

#
# libcddb
#
if enabled cddb; then
    if pkg-config libcddb; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs libcddb`
	echo "Using libcddb:         `pkg-config --modversion libcddb`"
    else
	echo "libcddb not found. Unable to build with Audio CD metadata support."
	die
    fi
fi

#
# AVAHI
#
if enabled avahi; then
    if pkg-config avahi-client; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs avahi-client`
	echo >>${CONFIG_MAK} "CFLAGS_AVAHI += "`pkg-config --cflags avahi-client`
	echo "Using AVAHI client:    `pkg-config --modversion avahi-client`"
    else
	echo "avahi-client not found. Unable to build with AVAHI support."
	echo "To compile without it, configure with: --disable-avahi"
	die
    fi
fi


#
# SSL
#
if enabled ssl; then
    if pkg-config libssl; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs libssl`
	echo "Using libssl:          `pkg-config --modversion libssl`"
    elif pkg-config openssl; then
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg-config --libs openssl`
	echo "Using openssl:         `pkg-config --modversion openssl`"
    else
	echo "libssl or openssl not found"
	echo "To compile without it, configure with: --disable-ssl"
	die
    fi

    enable librtmp
fi


#
# NVCtrl
#
if enabled nvctrl; then
    
    check_header "NVCtrl/NVCtrl.h" || fatal "nvctrl" "Missing include file NVCtrl/NVCtrl.h"
    check_lib    "XNVCtrl"         || fatal "nvctrl" "Unable to link with libXNVCtrl"
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += -lXNVCtrl"
fi


#
# libopenspc
#
if enabled libopenspc; then
    
    check_header "openspc.h" || fatal "openspc" "Missing include file openspc.h"
    check_lib    "openspc"   || fatal "openspc" "Unable to link with libopenspc"
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += -lopenspc"
fi


#
# libsmbclient
#
if enabled libsmbclient; then
    
    check_header "libsmbclient.h" || fatal "libsmbclient" "Missing include file libsmbclient.h"
    check_lib    "smbclient"      || fatal "libsmbclient" "Unable to link with libsmbclient"
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += -lsmbclient"
fi


#
# configure ffmpeg
#
setup_ffmpeg --cpu=${CPU} --enable-pthreads

#
# Configure paths, etc
#
if disabled release; then
    echo  Development build. 
    echo  The generated binary will contain compiled-in paths to
    echo  the current build tree. If you plan to install the binary,
    echo  please reconfigure with '--release'.
fi

#
# Finalize

echo >>${CONFIG_MAK} INSTALLPREFIX=$PREFIX
echo >>${CONFIG_MAK} LDFLAGS_cfg += -lpthread -lrt

finalize
