static const char*(*f_sp_error_message)(sp_error error);
static sp_error(*f_sp_session_init)(const sp_session_config *config, sp_session **sess);
static sp_error(*f_sp_session_login)(sp_session *session, const char *username, const char *password);
static sp_user *(*f_sp_session_user)(sp_session *session);
static sp_error(*f_sp_session_logout)(sp_session *session);
static sp_connectionstate(*f_sp_session_connectionstate)(sp_session *session);
static void *(*f_sp_session_userdata)(sp_session *session);
static void(*f_sp_session_process_events)(sp_session *session, int *next_timeout);
static sp_error(*f_sp_session_player_load)(sp_session *session, sp_track *track);
static sp_error(*f_sp_session_player_seek)(sp_session *session, int offset);
static sp_error(*f_sp_session_player_play)(sp_session *session, bool play);
static void(*f_sp_session_player_unload)(sp_session *session);
static sp_playlistcontainer *(*f_sp_session_playlistcontainer)(sp_session *session);
static sp_link *(*f_sp_link_create_from_string)(const char *link);
static sp_link *(*f_sp_link_create_from_track)(sp_track *track, int offset);
static sp_link *(*f_sp_link_create_from_album)(sp_album *album);
static sp_link *(*f_sp_link_create_from_artist)(sp_artist *artist);
static sp_link *(*f_sp_link_create_from_search)(sp_search *search);
static sp_link *(*f_sp_link_create_from_playlist)(sp_playlist *playlist);
static int(*f_sp_link_as_string)(sp_link *link, char *buffer, int buffer_size);
static sp_linktype(*f_sp_link_type)(sp_link *link);
static sp_track *(*f_sp_link_as_track)(sp_link *link);
static sp_album *(*f_sp_link_as_album)(sp_link *link);
static sp_artist *(*f_sp_link_as_artist)(sp_link *link);
static void(*f_sp_link_add_ref)(sp_link *link);
static void(*f_sp_link_release)(sp_link *link);
static bool(*f_sp_track_is_loaded)(sp_track *track);
static sp_error(*f_sp_track_error)(sp_track *track);
static bool(*f_sp_track_is_available)(sp_track *track);
static int(*f_sp_track_num_artists)(sp_track *track);
static sp_artist *(*f_sp_track_artist)(sp_track *track, int index);
static sp_album *(*f_sp_track_album)(sp_track *track);
static const char *(*f_sp_track_name)(sp_track *track);
static int(*f_sp_track_duration)(sp_track *track);
static int(*f_sp_track_popularity)(sp_track *track);
static int(*f_sp_track_disc)(sp_track *track);
static int(*f_sp_track_index)(sp_track *track);
static void(*f_sp_track_add_ref)(sp_track *track);
static void(*f_sp_track_release)(sp_track *track);
static bool(*f_sp_album_is_loaded)(sp_album *album);
static bool(*f_sp_album_is_available)(sp_album *album);
static sp_artist *(*f_sp_album_artist)(sp_album *album);
static const byte *(*f_sp_album_cover)(sp_album *album);
static const char *(*f_sp_album_name)(sp_album *album);
static int(*f_sp_album_year)(sp_album *album);
static sp_albumtype(*f_sp_album_type)(sp_album *album);
static void(*f_sp_album_add_ref)(sp_album *album);
static void(*f_sp_album_release)(sp_album *album);
static const char *(*f_sp_artist_name)(sp_artist *artist);
static bool(*f_sp_artist_is_loaded)(sp_artist *artist);
static void(*f_sp_artist_add_ref)(sp_artist *artist);
static void(*f_sp_artist_release)(sp_artist *artist);
static sp_albumbrowse *(*f_sp_albumbrowse_create)(sp_session *session, sp_album *album, albumbrowse_complete_cb *callback, void *userdata);
static bool(*f_sp_albumbrowse_is_loaded)(sp_albumbrowse *alb);
static sp_error(*f_sp_albumbrowse_error)(sp_albumbrowse *alb);
static sp_album *(*f_sp_albumbrowse_album)(sp_albumbrowse *alb);
static sp_artist *(*f_sp_albumbrowse_artist)(sp_albumbrowse *alb);
static int(*f_sp_albumbrowse_num_copyrights)(sp_albumbrowse *alb);
static const char *(*f_sp_albumbrowse_copyright)(sp_albumbrowse *alb, int index);
static int(*f_sp_albumbrowse_num_tracks)(sp_albumbrowse *alb);
static sp_track *(*f_sp_albumbrowse_track)(sp_albumbrowse *alb, int index);
static const char *(*f_sp_albumbrowse_review)(sp_albumbrowse *alb);
static void(*f_sp_albumbrowse_add_ref)(sp_albumbrowse *alb);
static void(*f_sp_albumbrowse_release)(sp_albumbrowse *alb);
static sp_artistbrowse *(*f_sp_artistbrowse_create)(sp_session *session, sp_artist *artist, artistbrowse_complete_cb *callback, void *userdata);
static bool(*f_sp_artistbrowse_is_loaded)(sp_artistbrowse *arb);
static sp_error(*f_sp_artistbrowse_error)(sp_artistbrowse *arb);
static sp_artist *(*f_sp_artistbrowse_artist)(sp_artistbrowse *arb);
static int(*f_sp_artistbrowse_num_portraits)(sp_artistbrowse *arb);
static const byte *(*f_sp_artistbrowse_portrait)(sp_artistbrowse *arb, int index);
static int(*f_sp_artistbrowse_num_tracks)(sp_artistbrowse *arb);
static sp_track *(*f_sp_artistbrowse_track)(sp_artistbrowse *arb, int index);
static int(*f_sp_artistbrowse_num_similar_artists)(sp_artistbrowse *arb);
static sp_artist *(*f_sp_artistbrowse_similar_artist)(sp_artistbrowse *arb, int index);
static const char *(*f_sp_artistbrowse_biography)(sp_artistbrowse *arb);
static void(*f_sp_artistbrowse_add_ref)(sp_artistbrowse *arb);
static void(*f_sp_artistbrowse_release)(sp_artistbrowse *arb);
static sp_image *(*f_sp_image_create)(sp_session *session, const byte image_id[20]);
static void(*f_sp_image_add_load_callback)(sp_image *image, image_loaded_cb *callback, void *userdata);
static void(*f_sp_image_remove_load_callback)(sp_image *image, image_loaded_cb *callback, void *userdata);
static bool(*f_sp_image_is_loaded)(sp_image *image);
static sp_error(*f_sp_image_error)(sp_image *image);
static int(*f_sp_image_width)(sp_image *image);
static int(*f_sp_image_height)(sp_image *image);
static sp_imageformat(*f_sp_image_format)(sp_image *image);
static void *(*f_sp_image_lock_pixels)(sp_image *image, int *pitch);
static void(*f_sp_image_unlock_pixels)(sp_image *image);
static const byte *(*f_sp_image_image_id)(sp_image *image);
static void(*f_sp_image_add_ref)(sp_image *image);
static void(*f_sp_image_release)(sp_image *image);
static sp_search *(*f_sp_search_create)(sp_session *session, const char *query, int track_offset, int track_count, int album_offset, int album_count, int artist_offset, int artist_count, search_complete_cb *callback, void *userdata);
static bool(*f_sp_search_is_loaded)(sp_search *search);
static sp_error(*f_sp_search_error)(sp_search *search);
static int(*f_sp_search_num_tracks)(sp_search *search);
static sp_track *(*f_sp_search_track)(sp_search *search, int index);
static int(*f_sp_search_num_albums)(sp_search *search);
static sp_album *(*f_sp_search_album)(sp_search *search, int index);
static int(*f_sp_search_num_artists)(sp_search *search);
static sp_artist *(*f_sp_search_artist)(sp_search *search, int index);
static const char *(*f_sp_search_query)(sp_search *search);
static const char *(*f_sp_search_did_you_mean)(sp_search *search);
static int(*f_sp_search_total_tracks)(sp_search *search);
static void(*f_sp_search_add_ref)(sp_search *search);
static void(*f_sp_search_release)(sp_search *search);
static bool(*f_sp_playlist_is_loaded)(sp_playlist *playlist);
static void(*f_sp_playlist_add_callbacks)(sp_playlist *playlist, sp_playlist_callbacks *callbacks, void *userdata);
static void(*f_sp_playlist_remove_callbacks)(sp_playlist *playlist, sp_playlist_callbacks *callbacks, void *userdata);
static int(*f_sp_playlist_num_tracks)(sp_playlist *playlist);
static sp_track *(*f_sp_playlist_track)(sp_playlist *playlist, int index);
static const char *(*f_sp_playlist_name)(sp_playlist *playlist);
static sp_error(*f_sp_playlist_rename)(sp_playlist *playlist, const char *new_name);
static sp_user *(*f_sp_playlist_owner)(sp_playlist *playlist);
static bool(*f_sp_playlist_is_collaborative)(sp_playlist *playlist);
static void(*f_sp_playlist_set_collaborative)(sp_playlist *playlist, bool collaborative);
static bool(*f_sp_playlist_has_pending_changes)(sp_playlist *playlist);
static sp_error(*f_sp_playlist_add_tracks)(sp_playlist *playlist, const sp_track **tracks, int num_tracks, int position);
static sp_error(*f_sp_playlist_remove_tracks)(sp_playlist *playlist, const int *tracks, int num_tracks);
static sp_error(*f_sp_playlist_reorder_tracks)(sp_playlist *playlist, const int *tracks, int num_tracks, int new_position);
static void(*f_sp_playlistcontainer_add_callbacks)(sp_playlistcontainer *pc, sp_playlistcontainer_callbacks *callbacks, void *userdata);
static void(*f_sp_playlistcontainer_remove_callbacks)(sp_playlistcontainer *pc, sp_playlistcontainer_callbacks *callbacks, void *userdata);
static int(*f_sp_playlistcontainer_num_playlists)(sp_playlistcontainer *pc);
static sp_playlist *(*f_sp_playlistcontainer_playlist)(sp_playlistcontainer *pc, int index);
static sp_playlist *(*f_sp_playlistcontainer_add_new_playlist)(sp_playlistcontainer *pc, const char *name);
static sp_playlist *(*f_sp_playlistcontainer_add_playlist)(sp_playlistcontainer *pc, sp_link *link);
static sp_error(*f_sp_playlistcontainer_remove_playlist)(sp_playlistcontainer *pc, int index);
static sp_error(*f_sp_playlistcontainer_move_playlist)(sp_playlistcontainer *pc, int index, int new_position);
static const char *(*f_sp_user_canonical_name)(sp_user *user);
static const char *(*f_sp_user_display_name)(sp_user *user);
static bool(*f_sp_user_is_loaded)(sp_user *user);
static const char *resolvesym(void *handle) {
if((f_sp_error_message=dlsym(handle,"sp_error_message"))==NULL) return "sp_error_message";
if((f_sp_session_init=dlsym(handle,"sp_session_init"))==NULL) return "sp_session_init";
if((f_sp_session_login=dlsym(handle,"sp_session_login"))==NULL) return "sp_session_login";
if((f_sp_session_user=dlsym(handle,"sp_session_user"))==NULL) return "sp_session_user";
if((f_sp_session_logout=dlsym(handle,"sp_session_logout"))==NULL) return "sp_session_logout";
if((f_sp_session_connectionstate=dlsym(handle,"sp_session_connectionstate"))==NULL) return "sp_session_connectionstate";
if((f_sp_session_userdata=dlsym(handle,"sp_session_userdata"))==NULL) return "sp_session_userdata";
if((f_sp_session_process_events=dlsym(handle,"sp_session_process_events"))==NULL) return "sp_session_process_events";
if((f_sp_session_player_load=dlsym(handle,"sp_session_player_load"))==NULL) return "sp_session_player_load";
if((f_sp_session_player_seek=dlsym(handle,"sp_session_player_seek"))==NULL) return "sp_session_player_seek";
if((f_sp_session_player_play=dlsym(handle,"sp_session_player_play"))==NULL) return "sp_session_player_play";
if((f_sp_session_player_unload=dlsym(handle,"sp_session_player_unload"))==NULL) return "sp_session_player_unload";
if((f_sp_session_playlistcontainer=dlsym(handle,"sp_session_playlistcontainer"))==NULL) return "sp_session_playlistcontainer";
if((f_sp_link_create_from_string=dlsym(handle,"sp_link_create_from_string"))==NULL) return "sp_link_create_from_string";
if((f_sp_link_create_from_track=dlsym(handle,"sp_link_create_from_track"))==NULL) return "sp_link_create_from_track";
if((f_sp_link_create_from_album=dlsym(handle,"sp_link_create_from_album"))==NULL) return "sp_link_create_from_album";
if((f_sp_link_create_from_artist=dlsym(handle,"sp_link_create_from_artist"))==NULL) return "sp_link_create_from_artist";
if((f_sp_link_create_from_search=dlsym(handle,"sp_link_create_from_search"))==NULL) return "sp_link_create_from_search";
if((f_sp_link_create_from_playlist=dlsym(handle,"sp_link_create_from_playlist"))==NULL) return "sp_link_create_from_playlist";
if((f_sp_link_as_string=dlsym(handle,"sp_link_as_string"))==NULL) return "sp_link_as_string";
if((f_sp_link_type=dlsym(handle,"sp_link_type"))==NULL) return "sp_link_type";
if((f_sp_link_as_track=dlsym(handle,"sp_link_as_track"))==NULL) return "sp_link_as_track";
if((f_sp_link_as_album=dlsym(handle,"sp_link_as_album"))==NULL) return "sp_link_as_album";
if((f_sp_link_as_artist=dlsym(handle,"sp_link_as_artist"))==NULL) return "sp_link_as_artist";
if((f_sp_link_add_ref=dlsym(handle,"sp_link_add_ref"))==NULL) return "sp_link_add_ref";
if((f_sp_link_release=dlsym(handle,"sp_link_release"))==NULL) return "sp_link_release";
if((f_sp_track_is_loaded=dlsym(handle,"sp_track_is_loaded"))==NULL) return "sp_track_is_loaded";
if((f_sp_track_error=dlsym(handle,"sp_track_error"))==NULL) return "sp_track_error";
if((f_sp_track_is_available=dlsym(handle,"sp_track_is_available"))==NULL) return "sp_track_is_available";
if((f_sp_track_num_artists=dlsym(handle,"sp_track_num_artists"))==NULL) return "sp_track_num_artists";
if((f_sp_track_artist=dlsym(handle,"sp_track_artist"))==NULL) return "sp_track_artist";
if((f_sp_track_album=dlsym(handle,"sp_track_album"))==NULL) return "sp_track_album";
if((f_sp_track_name=dlsym(handle,"sp_track_name"))==NULL) return "sp_track_name";
if((f_sp_track_duration=dlsym(handle,"sp_track_duration"))==NULL) return "sp_track_duration";
if((f_sp_track_popularity=dlsym(handle,"sp_track_popularity"))==NULL) return "sp_track_popularity";
if((f_sp_track_disc=dlsym(handle,"sp_track_disc"))==NULL) return "sp_track_disc";
if((f_sp_track_index=dlsym(handle,"sp_track_index"))==NULL) return "sp_track_index";
if((f_sp_track_add_ref=dlsym(handle,"sp_track_add_ref"))==NULL) return "sp_track_add_ref";
if((f_sp_track_release=dlsym(handle,"sp_track_release"))==NULL) return "sp_track_release";
if((f_sp_album_is_loaded=dlsym(handle,"sp_album_is_loaded"))==NULL) return "sp_album_is_loaded";
if((f_sp_album_is_available=dlsym(handle,"sp_album_is_available"))==NULL) return "sp_album_is_available";
if((f_sp_album_artist=dlsym(handle,"sp_album_artist"))==NULL) return "sp_album_artist";
if((f_sp_album_cover=dlsym(handle,"sp_album_cover"))==NULL) return "sp_album_cover";
if((f_sp_album_name=dlsym(handle,"sp_album_name"))==NULL) return "sp_album_name";
if((f_sp_album_year=dlsym(handle,"sp_album_year"))==NULL) return "sp_album_year";
if((f_sp_album_type=dlsym(handle,"sp_album_type"))==NULL) return "sp_album_type";
if((f_sp_album_add_ref=dlsym(handle,"sp_album_add_ref"))==NULL) return "sp_album_add_ref";
if((f_sp_album_release=dlsym(handle,"sp_album_release"))==NULL) return "sp_album_release";
if((f_sp_artist_name=dlsym(handle,"sp_artist_name"))==NULL) return "sp_artist_name";
if((f_sp_artist_is_loaded=dlsym(handle,"sp_artist_is_loaded"))==NULL) return "sp_artist_is_loaded";
if((f_sp_artist_add_ref=dlsym(handle,"sp_artist_add_ref"))==NULL) return "sp_artist_add_ref";
if((f_sp_artist_release=dlsym(handle,"sp_artist_release"))==NULL) return "sp_artist_release";
if((f_sp_albumbrowse_create=dlsym(handle,"sp_albumbrowse_create"))==NULL) return "sp_albumbrowse_create";
if((f_sp_albumbrowse_is_loaded=dlsym(handle,"sp_albumbrowse_is_loaded"))==NULL) return "sp_albumbrowse_is_loaded";
if((f_sp_albumbrowse_error=dlsym(handle,"sp_albumbrowse_error"))==NULL) return "sp_albumbrowse_error";
if((f_sp_albumbrowse_album=dlsym(handle,"sp_albumbrowse_album"))==NULL) return "sp_albumbrowse_album";
if((f_sp_albumbrowse_artist=dlsym(handle,"sp_albumbrowse_artist"))==NULL) return "sp_albumbrowse_artist";
if((f_sp_albumbrowse_num_copyrights=dlsym(handle,"sp_albumbrowse_num_copyrights"))==NULL) return "sp_albumbrowse_num_copyrights";
if((f_sp_albumbrowse_copyright=dlsym(handle,"sp_albumbrowse_copyright"))==NULL) return "sp_albumbrowse_copyright";
if((f_sp_albumbrowse_num_tracks=dlsym(handle,"sp_albumbrowse_num_tracks"))==NULL) return "sp_albumbrowse_num_tracks";
if((f_sp_albumbrowse_track=dlsym(handle,"sp_albumbrowse_track"))==NULL) return "sp_albumbrowse_track";
if((f_sp_albumbrowse_review=dlsym(handle,"sp_albumbrowse_review"))==NULL) return "sp_albumbrowse_review";
if((f_sp_albumbrowse_add_ref=dlsym(handle,"sp_albumbrowse_add_ref"))==NULL) return "sp_albumbrowse_add_ref";
if((f_sp_albumbrowse_release=dlsym(handle,"sp_albumbrowse_release"))==NULL) return "sp_albumbrowse_release";
if((f_sp_artistbrowse_create=dlsym(handle,"sp_artistbrowse_create"))==NULL) return "sp_artistbrowse_create";
if((f_sp_artistbrowse_is_loaded=dlsym(handle,"sp_artistbrowse_is_loaded"))==NULL) return "sp_artistbrowse_is_loaded";
if((f_sp_artistbrowse_error=dlsym(handle,"sp_artistbrowse_error"))==NULL) return "sp_artistbrowse_error";
if((f_sp_artistbrowse_artist=dlsym(handle,"sp_artistbrowse_artist"))==NULL) return "sp_artistbrowse_artist";
if((f_sp_artistbrowse_num_portraits=dlsym(handle,"sp_artistbrowse_num_portraits"))==NULL) return "sp_artistbrowse_num_portraits";
if((f_sp_artistbrowse_portrait=dlsym(handle,"sp_artistbrowse_portrait"))==NULL) return "sp_artistbrowse_portrait";
if((f_sp_artistbrowse_num_tracks=dlsym(handle,"sp_artistbrowse_num_tracks"))==NULL) return "sp_artistbrowse_num_tracks";
if((f_sp_artistbrowse_track=dlsym(handle,"sp_artistbrowse_track"))==NULL) return "sp_artistbrowse_track";
if((f_sp_artistbrowse_num_similar_artists=dlsym(handle,"sp_artistbrowse_num_similar_artists"))==NULL) return "sp_artistbrowse_num_similar_artists";
if((f_sp_artistbrowse_similar_artist=dlsym(handle,"sp_artistbrowse_similar_artist"))==NULL) return "sp_artistbrowse_similar_artist";
if((f_sp_artistbrowse_biography=dlsym(handle,"sp_artistbrowse_biography"))==NULL) return "sp_artistbrowse_biography";
if((f_sp_artistbrowse_add_ref=dlsym(handle,"sp_artistbrowse_add_ref"))==NULL) return "sp_artistbrowse_add_ref";
if((f_sp_artistbrowse_release=dlsym(handle,"sp_artistbrowse_release"))==NULL) return "sp_artistbrowse_release";
if((f_sp_image_create=dlsym(handle,"sp_image_create"))==NULL) return "sp_image_create";
if((f_sp_image_add_load_callback=dlsym(handle,"sp_image_add_load_callback"))==NULL) return "sp_image_add_load_callback";
if((f_sp_image_remove_load_callback=dlsym(handle,"sp_image_remove_load_callback"))==NULL) return "sp_image_remove_load_callback";
if((f_sp_image_is_loaded=dlsym(handle,"sp_image_is_loaded"))==NULL) return "sp_image_is_loaded";
if((f_sp_image_error=dlsym(handle,"sp_image_error"))==NULL) return "sp_image_error";
if((f_sp_image_width=dlsym(handle,"sp_image_width"))==NULL) return "sp_image_width";
if((f_sp_image_height=dlsym(handle,"sp_image_height"))==NULL) return "sp_image_height";
if((f_sp_image_format=dlsym(handle,"sp_image_format"))==NULL) return "sp_image_format";
if((f_sp_image_lock_pixels=dlsym(handle,"sp_image_lock_pixels"))==NULL) return "sp_image_lock_pixels";
if((f_sp_image_unlock_pixels=dlsym(handle,"sp_image_unlock_pixels"))==NULL) return "sp_image_unlock_pixels";
if((f_sp_image_image_id=dlsym(handle,"sp_image_image_id"))==NULL) return "sp_image_image_id";
if((f_sp_image_add_ref=dlsym(handle,"sp_image_add_ref"))==NULL) return "sp_image_add_ref";
if((f_sp_image_release=dlsym(handle,"sp_image_release"))==NULL) return "sp_image_release";
if((f_sp_search_create=dlsym(handle,"sp_search_create"))==NULL) return "sp_search_create";
if((f_sp_search_is_loaded=dlsym(handle,"sp_search_is_loaded"))==NULL) return "sp_search_is_loaded";
if((f_sp_search_error=dlsym(handle,"sp_search_error"))==NULL) return "sp_search_error";
if((f_sp_search_num_tracks=dlsym(handle,"sp_search_num_tracks"))==NULL) return "sp_search_num_tracks";
if((f_sp_search_track=dlsym(handle,"sp_search_track"))==NULL) return "sp_search_track";
if((f_sp_search_num_albums=dlsym(handle,"sp_search_num_albums"))==NULL) return "sp_search_num_albums";
if((f_sp_search_album=dlsym(handle,"sp_search_album"))==NULL) return "sp_search_album";
if((f_sp_search_num_artists=dlsym(handle,"sp_search_num_artists"))==NULL) return "sp_search_num_artists";
if((f_sp_search_artist=dlsym(handle,"sp_search_artist"))==NULL) return "sp_search_artist";
if((f_sp_search_query=dlsym(handle,"sp_search_query"))==NULL) return "sp_search_query";
if((f_sp_search_did_you_mean=dlsym(handle,"sp_search_did_you_mean"))==NULL) return "sp_search_did_you_mean";
if((f_sp_search_total_tracks=dlsym(handle,"sp_search_total_tracks"))==NULL) return "sp_search_total_tracks";
if((f_sp_search_add_ref=dlsym(handle,"sp_search_add_ref"))==NULL) return "sp_search_add_ref";
if((f_sp_search_release=dlsym(handle,"sp_search_release"))==NULL) return "sp_search_release";
if((f_sp_playlist_is_loaded=dlsym(handle,"sp_playlist_is_loaded"))==NULL) return "sp_playlist_is_loaded";
if((f_sp_playlist_add_callbacks=dlsym(handle,"sp_playlist_add_callbacks"))==NULL) return "sp_playlist_add_callbacks";
if((f_sp_playlist_remove_callbacks=dlsym(handle,"sp_playlist_remove_callbacks"))==NULL) return "sp_playlist_remove_callbacks";
if((f_sp_playlist_num_tracks=dlsym(handle,"sp_playlist_num_tracks"))==NULL) return "sp_playlist_num_tracks";
if((f_sp_playlist_track=dlsym(handle,"sp_playlist_track"))==NULL) return "sp_playlist_track";
if((f_sp_playlist_name=dlsym(handle,"sp_playlist_name"))==NULL) return "sp_playlist_name";
if((f_sp_playlist_rename=dlsym(handle,"sp_playlist_rename"))==NULL) return "sp_playlist_rename";
if((f_sp_playlist_owner=dlsym(handle,"sp_playlist_owner"))==NULL) return "sp_playlist_owner";
if((f_sp_playlist_is_collaborative=dlsym(handle,"sp_playlist_is_collaborative"))==NULL) return "sp_playlist_is_collaborative";
if((f_sp_playlist_set_collaborative=dlsym(handle,"sp_playlist_set_collaborative"))==NULL) return "sp_playlist_set_collaborative";
if((f_sp_playlist_has_pending_changes=dlsym(handle,"sp_playlist_has_pending_changes"))==NULL) return "sp_playlist_has_pending_changes";
if((f_sp_playlist_add_tracks=dlsym(handle,"sp_playlist_add_tracks"))==NULL) return "sp_playlist_add_tracks";
if((f_sp_playlist_remove_tracks=dlsym(handle,"sp_playlist_remove_tracks"))==NULL) return "sp_playlist_remove_tracks";
if((f_sp_playlist_reorder_tracks=dlsym(handle,"sp_playlist_reorder_tracks"))==NULL) return "sp_playlist_reorder_tracks";
if((f_sp_playlistcontainer_add_callbacks=dlsym(handle,"sp_playlistcontainer_add_callbacks"))==NULL) return "sp_playlistcontainer_add_callbacks";
if((f_sp_playlistcontainer_remove_callbacks=dlsym(handle,"sp_playlistcontainer_remove_callbacks"))==NULL) return "sp_playlistcontainer_remove_callbacks";
if((f_sp_playlistcontainer_num_playlists=dlsym(handle,"sp_playlistcontainer_num_playlists"))==NULL) return "sp_playlistcontainer_num_playlists";
if((f_sp_playlistcontainer_playlist=dlsym(handle,"sp_playlistcontainer_playlist"))==NULL) return "sp_playlistcontainer_playlist";
if((f_sp_playlistcontainer_add_new_playlist=dlsym(handle,"sp_playlistcontainer_add_new_playlist"))==NULL) return "sp_playlistcontainer_add_new_playlist";
if((f_sp_playlistcontainer_add_playlist=dlsym(handle,"sp_playlistcontainer_add_playlist"))==NULL) return "sp_playlistcontainer_add_playlist";
if((f_sp_playlistcontainer_remove_playlist=dlsym(handle,"sp_playlistcontainer_remove_playlist"))==NULL) return "sp_playlistcontainer_remove_playlist";
if((f_sp_playlistcontainer_move_playlist=dlsym(handle,"sp_playlistcontainer_move_playlist"))==NULL) return "sp_playlistcontainer_move_playlist";
if((f_sp_user_canonical_name=dlsym(handle,"sp_user_canonical_name"))==NULL) return "sp_user_canonical_name";
if((f_sp_user_display_name=dlsym(handle,"sp_user_display_name"))==NULL) return "sp_user_display_name";
if((f_sp_user_is_loaded=dlsym(handle,"sp_user_is_loaded"))==NULL) return "sp_user_is_loaded";
return NULL;}
