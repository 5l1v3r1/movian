#!/bin/bash
#
# HTS configure script for Mac OS X
#
# Copyright (c) 2005-2009 Mattias Wadman
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#

PLATFORM="osx"
OSENV="posix"
DEFAULT_UI="glw"

source support/configure.inc

CPU=generic
ARCH=`uname -m`
PKGCONFIG="/opt/local/bin/pkg-config"
PKGCONFIGDIR="/opt/local/lib/pkgconfig"
MACOSXTARGET=""
MACOSXSDK=""
APPDIR=${BUILDDIR}/Showtime.app

show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  echo "  --prefix=PREFIX          install in PREFIX [$PREFIX]"
  echo "  --arch=arch              Build for this architecture [$ARCH]"
  echo "  --cpu=cpu                Build and optimize for specific CPU"
  echo "  --cc=CC                  Build using the given compiler"
  echo "  --release                Stage for release"
  echo "  --embedded-theme         Embed theme in showtime [none]"
  echo "  --macosxsdk=PATH         Mac OS X SDK path [$MACOSXSDK]"
  echo "  --pkg-config=PATH        pkg-config path [$PKGCONFIG]"
  echo "  --pkg-config-dir=PATH    pkg-config config dir[$PKGCONFIGDIR]"
  exit 1
}

# figure out what archives to link with by modifying output
# from pkg-config
# this is done because gcc (on at least osx) cant be
# forced to link some libraries static with -static using -l
pkg_config_static() {
  libdir=`$PKGCONFIG --variable=libdir $1`
  args=""
  for arg in `$PKGCONFIG --libs $*` ; do
    if [ \
        "$arg" = "-lm" -o \
        "$arg" = "-lz" -o \
        "$arg" = "-lpthread" ] \
        ; then
      continue
    fi
    if [ "${arg:0:2}" != "-l" ] ; then
      args+="$arg "
    else
      args+="${arg/-l/$libdir/lib}.a "
    fi
  done
  echo $args
}


enable libfreetype
enable glw
enable glw_frontend_cocoa
enable glw_backend_opengl
enable coreaudio
enable appleremote
enable bonjour

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --prefix=*) PREFIX="$optval"
  ;;
  --cpu=*) CPU="$optval"
  ;;
  --help) show_help
  ;;
  --release) 
    enable release
    enable embedded_resources
  ;;
  --cc=*) CC="$optval"
  ;;
  --arch=*) ARCH="$optval"
  ;;
  --macosx-sdk=*) MACOSXSDK="$optval"
  ;;
  --pkg-config=*) PKGCONFIG="$optval"
  ;;
  --pkg-config-dir=*) PKGCONFIGDIR="$optval"
  ;;
  --enable-?*|--disable-?*)
    eval $(echo "$opt" | sed 's/--/action=/;s/-/ option=/;s/-/_/g')
    $action $option
  ;;
  esac
done


setup_env

enable libpthread
enable zlib
enable posix_networking
enable dvd


#
# Application bundle
# Override PROG to put binary inside app bundle
#
echo >>${CONFIG_MAK} "APPDIR=${APPDIR}"
PROG="${APPDIR}/Contents/MacOS/showtime"


#
# c compiler
#
checkcc() {
    cat >$TMPDIR/1.c <<EOF
int main() {
  return 0;
}
EOF
    $CC 2>/dev/null $TMPDIR/1.c -o $TMPDIR/1.bin 
}

if [ "x$CC" != "x" ]; then
    echo >>${CONFIG_MAK} "CC=$CC"
    CC="$CC"
else
    CC=cc
fi

if checkcc; then 
    echo "Using C compiler:      $CC"
else
    echo "C compiler ($CC) is not working"
    die
fi

echo >>${CONFIG_MAK} $CC_CONFIG_MAK 

#
# Check SDK path and set target version
#
if [ "x$MACOSXSDK" != "x" ] ; then
    if [ -d "$MACOSXSDK" ] ; then
        SDKSETTINGS="$MACOSXSDK/SDKSettings"
        if [ ! -e "$SDKSETTINGS.plist" ] ; then
            echo "Could not find $SDKSETTINGS.plist"
            die
        fi
        
        MACOSXTARGET=`defaults read $SDKSETTINGS Version`
        echo "Mac OS X SDK:          $MACOSXSDK"
        echo "Mac OS X target:       $MACOSXTARGET"
    else
        echo "Mac OS X SDK directory $MACOSXSDK does not exist"
        die
    fi
    
    MACOSXSDK_CFLAGS="-mmacosx-version-min=$MACOSXTARGET -isysroot $MACOSXSDK"
    MACOSXSDK_LDFLAGS="$MACOSXSDK_CFLAGS"
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += $MACOSXSDK_LDFLAGS"
    echo >>${CONFIG_MAK} "CFLAGS_cfg += $MACOSXSDK_CFLAGS"
else
    echo "Mac OS X SDK:          default"
    echo "Mac OS X target:       default (`sw_vers -productVersion`)"
fi

#
# pkg-config, set LIBDIR to makes pkg-config only search that path
#
if [ ! -x "$PKGCONFIG" ] ; then
    echo "$PKGCONFIG does not exist or is not executable, make sure it is installed"
    echo "You can also specify another path with --pkg-config"
    die
fi
if [ ! -d "$PKGCONFIGDIR" ] ; then
    echo "$PKGCONFIGDIR does not exist, make sure pkg-config is installed"
    echo "You can also specify another directory with --pkg-config-dir"
    die
fi
export PKG_CONFIG_LIBDIR=$PKGCONFIGDIR
PKGS=""

#
# libfreetype2
#
if $PKGCONFIG freetype2; then
    PKGS+="freetype2 "
    echo "Using Freetype2:       `$PKGCONFIG --modversion freetype2`"
else
    echo "FreeType 2 not found"
    die
fi

echo >>${CONFIG_MAK} "LDFLAGS_cfg += " `pkg_config_static $PKGS`
echo >>${CONFIG_MAK} "CFLAGS_cfg +=" `$PKGCONFIG --cflags $PKGS`

#
# Standard Mac OS X frameworks
#
echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework Foundation"
echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework CoreFoundation"
echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework Cocoa"
# IOKit for dvd
echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework IOKit"
echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework OpenGL -framework GLUT"

# CoreAudio
if enabled coreaudio; then
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework CoreAudio"
fi

# Carbon, Remote Control Wrapper uses it
if enabled appleremote; then
    echo >>${CONFIG_MAK} "LDFLAGS_cfg += -framework Carbon"
fi

#
# configure ffmpeg
#
if [ "$ARCH" == "powerpc" ]; then
    setup_ffmpeg \
        --enable-pthreads \
        --enable-cross-compile \
        --arch=powerpc \
        --disable-altivec \
        --extra-cflags="$MACOSXSDK_CFLAGS" \
        --extra-ldflags="$MACOSXSDK_LDFLAGS" \
        --cc="$CC"
else
    setup_ffmpeg \
        --cpu=${CPU} \
        --enable-pthreads \
        --extra-cflags="$MACOSXSDK_CFLAGS" \
        --extra-ldflags="$MACOSXSDK_LDFLAGS" \
        --cc="$CC"
fi
      
#
# Configure paths, etc
#
if disabled release; then
    echo  Development build. 
    echo  The generated binary will contained compild-in paths to
    echo  the current build tree. If you plan to install the binary,
    echo  please reconfigure with '--release'.
fi

#
# Some compatibility defines
#
cat >> ${CONFIG_H} << EOF
/* Darwin is default 64 bit */
#define off64_t off_t
#define lseek64 lseek

/* Different name on darwin */
#define MAP_ANONYMOUS MAP_ANON

/* dvdcss, not defined on darwin is default large file and binary */
#define O_LARGEFILE 0
#define O_BINARY 0

EOF

#
# Finalize
#
echo >>${CONFIG_MAK} LDFLAGS_cfg += -lpthread

finalize
