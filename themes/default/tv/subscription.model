#include "theme://include/bar.model"
#include "theme://tv/epginfo.model"

widget(container_z, {
  .focusCursor = true;

  widget(container_z, {
    .id = "video_container";
  });



  widget(container_y, {

    space(0.1);

    widget(container_z, {

      .weight = 2 - channel.fullscreen;

      .debug = true;
      /**
       * Only display the header if title changes
       */
      .alpha = iir((1 - channel.fullscreen) ||
		   changed(channel.epg.event0.title, 5), 7);

      widget(bitmap, {

	.color = [0.3, 0.3, 0.3];
	.source = "theme://images/plate-compact.png";
	.textureBorders = [0.5,  0.5,  0.5,  0.5];
	.vertexBorders  = [0.05, 0.05, 0.05, 0.05];
      
	widget(container_x, {
	
	  widget(bitmap, {
	    .keepAspect = true;
	    .source = channel.icon;
	    .weight = 0.15;
	  });
	
	  widget(container_y, {
	    widget(label, {
	      .caption = channel.title;
	    });
	    EPGINFO(event0);
	  });
	});
      });
    });


    widget(container_x, {
      .alpha = channel.showDetails;
      .weight = 10.0;

      space(5.0);
      widget(bitmap, {
	.alpha = 0.9;
	.color = [0.0, 0.0, 0.3];
	.borderScale = true;
	.source = "theme://images/plate-compact.png";
	.textureBorders = [0.5,  0.5,  0.5,  0.5];
	.vertexBorders  = [0.03, 0.03, 0.03, 0.03];


	widget(container_y, {
	  widget(label, {.weight = 0.75; .caption = "Bitrate:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(channel.subscription.bitrate) + " kbit/s";
	  });
	  space(0.5);

	  widget(label, {.weight = 0.75; .caption = "Headend queue size:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(channel.subscription.queuesize) + " kB";
	  });
	  space(0.5);

	  widget(label, {.weight = 0.75; .caption = "Headend queue delay:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(channel.subscription.queuedelay) + " ms";
	  });
	  space(0.5);

	  widget(label, {.weight = 0.75; .caption = "Headend queue drops:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(channel.subscription.queuedrops) + " packets";
	  });
	  space(0.5);

	  widget(label, {.weight = 0.75; .caption = "Video queue size:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(media.video.qlen) + " packets";
	  });
	  space(0.5);

	  widget(label, {.weight = 0.75; .caption = "Audio queue size:";});
	  widget(label, {
	    .align = right;
	    .caption = int2str(media.audio.qlen) + " packets";
	  });
	  space(0.5);

	  space(18.0);

	});
      });
    });


    widget(label, {
      .caption = channel.subscription.status;
    });



  });
});
